#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ Light Novel NLP
"""

import requests
import json
import time
from typing import Dict, Any

class ComprehensiveTester:
    def __init__(self, base_url: str = "https://lightnovel-backend.onrender.com"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"   {details}")
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        
    def test_health_check(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            response = self.session.get(f"{self.base_url}/health")
            success = response.status_code == 200
            self.log_test("Health Check", success, f"Status: {response.status_code}")
            return success
        except Exception as e:
            self.log_test("Health Check", False, f"Error: {e}")
            return False
            
    def test_api_usage_stats(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API"""
        try:
            response = self.session.get(f"{self.base_url}/glossary/api-usage")
            success = response.status_code == 200
            if success:
                data = response.json()
                keys_count = len(data.get("keys", []))
                self.log_test("API Usage Stats", success, f"Found {keys_count} API keys")
            else:
                self.log_test("API Usage Stats", False, f"Status: {response.status_code}")
            return success
        except Exception as e:
            self.log_test("API Usage Stats", False, f"Error: {e}")
            return False
            
    def test_cache_stats(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        try:
            response = self.session.get(f"{self.base_url}/glossary/cache-stats")
            success = response.status_code == 200
            if success:
                data = response.json()
                memory_usage = data.get("used_memory", "N/A")
                self.log_test("Cache Stats", success, f"Memory: {memory_usage}")
            else:
                self.log_test("Cache Stats", False, f"Status: {response.status_code}")
            return success
        except Exception as e:
            self.log_test("Cache Stats", False, f"Error: {e}")
            return False
            
    def test_project_creation(self) -> tuple[bool, int]:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_data = {
                "name": f"Test Project {int(time.time())}",
                "genre": "fantasy"
            }
            response = self.session.post(f"{self.base_url}/projects/", json=project_data)
            success = response.status_code == 201
            project_id = None
            if success:
                data = response.json()
                project_id = data.get("id")
                self.log_test("Project Creation", success, f"Project ID: {project_id}")
            else:
                self.log_test("Project Creation", False, f"Status: {response.status_code}")
            return success, project_id
        except Exception as e:
            self.log_test("Project Creation", False, f"Error: {e}")
            return False, None
            
    def test_chapter_creation(self, project_id: int) -> tuple[bool, int]:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤—ã"""
        try:
            chapter_data = {
                "title": "Test Chapter",
                "original_text": "This is a test chapter with some content for analysis."
            }
            response = self.session.post(f"{self.base_url}/projects/{project_id}/chapters", json=chapter_data)
            success = response.status_code == 201
            chapter_id = None
            if success:
                data = response.json()
                chapter_id = data.get("id")
                self.log_test("Chapter Creation", success, f"Chapter ID: {chapter_id}")
            else:
                self.log_test("Chapter Creation", False, f"Status: {response.status_code}")
            return success, chapter_id
        except Exception as e:
            self.log_test("Chapter Creation", False, f"Error: {e}")
            return False, None
            
    def test_chapter_analysis(self, chapter_id: int) -> bool:
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤—ã"""
        try:
            response = self.session.post(f"{self.base_url}/processing/chapters/{chapter_id}/analyze")
            success = response.status_code == 200
            if success:
                data = response.json()
                terms_count = data.get("extracted_terms", 0)
                self.log_test("Chapter Analysis", success, f"Extracted {terms_count} terms")
            else:
                error_detail = response.text if response.status_code != 200 else ""
                self.log_test("Chapter Analysis", False, f"Status: {response.status_code}, Error: {error_detail}")
            return success
        except Exception as e:
            self.log_test("Chapter Analysis", False, f"Error: {e}")
            return False
            
    def test_chapter_translation(self, chapter_id: int) -> bool:
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã"""
        try:
            response = self.session.post(f"{self.base_url}/translation/chapters/{chapter_id}/translate")
            success = response.status_code == 200
            if success:
                data = response.json()
                has_translation = bool(data.get("translated_text"))
                self.log_test("Chapter Translation", success, f"Translation created: {has_translation}")
            else:
                error_detail = response.text if response.status_code != 200 else ""
                self.log_test("Chapter Translation", False, f"Status: {response.status_code}, Error: {error_detail}")
            return success
        except Exception as e:
            self.log_test("Chapter Translation", False, f"Error: {e}")
            return False
            
    def test_download_endpoint(self, project_id: int, chapter_id: int) -> bool:
        """–¢–µ—Å—Ç endpoint –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            response = self.session.get(f"{self.base_url}/projects/{project_id}/chapters/{chapter_id}/download")
            success = response.status_code == 200
            if success:
                content_length = len(response.content)
                self.log_test("Download Endpoint", success, f"Content length: {content_length} bytes")
            else:
                self.log_test("Download Endpoint", False, f"Status: {response.status_code}")
            return success
        except Exception as e:
            self.log_test("Download Endpoint", False, f"Error: {e}")
            return False
            
    def test_updated_api_usage(self) -> bool:
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            response = self.session.get(f"{self.base_url}/glossary/api-usage")
            success = response.status_code == 200
            if success:
                data = response.json()
                total_usage = sum(key.get("usage_today", 0) for key in data.get("keys", []))
                self.log_test("Updated API Usage", success, f"Total usage: {total_usage}")
            else:
                self.log_test("Updated API Usage", False, f"Status: {response.status_code}")
            return success
        except Exception as e:
            self.log_test("Updated API Usage", False, f"Error: {e}")
            return False
            
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Light Novel NLP")
        print("=" * 60)
        
        # 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not self.test_health_check():
            print("‚ùå Health check failed, stopping tests")
            return
            
        self.test_api_usage_stats()
        self.test_cache_stats()
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥–ª–∞–≤—ã
        project_success, project_id = self.test_project_creation()
        if not project_success or not project_id:
            print("‚ùå Project creation failed, stopping tests")
            return
            
        chapter_success, chapter_id = self.test_chapter_creation(project_id)
        if not chapter_success or not chapter_id:
            print("‚ùå Chapter creation failed, stopping tests")
            return
            
        # 3. –ê–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä–µ–≤–æ–¥
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞...")
        analysis_success = self.test_chapter_analysis(chapter_id)
        
        if analysis_success:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            time.sleep(2)
            translation_success = self.test_chapter_translation(chapter_id)
            
            if translation_success:
                # 4. –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                print("\nüì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
                self.test_download_endpoint(project_id, chapter_id)
        
        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìà –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        self.test_updated_api_usage()
        
        # 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"  - {result['test']}: {result['details']}")
        else:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    tester = ComprehensiveTester()
    tester.run_comprehensive_test()
