#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ API
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "https://lightnovel-backend.onrender.com"

def make_request(url, method="GET", data=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å"""
    try:
        if method == "GET":
            response = requests.get(url)
        elif method == "POST":
            response = requests.post(url, json=data)
        elif method == "PUT":
            response = requests.put(url, json=data)
        elif method == "DELETE":
            response = requests.delete(url)
        
        return {
            "success": response.status_code < 400,
            "status_code": response.status_code,
            "data": response.json() if response.content else None,
            "error": None
        }
    except Exception as e:
        return {
            "success": False,
            "status_code": None,
            "data": None,
            "error": str(e)
        }

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API")
    result = make_request(f"{API_BASE_URL}/health")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –û—Ç–≤–µ—Ç: {result['data']}")
    print()

def test_project_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    project_data = {
        "name": f"–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç {int(time.time())}"
    }
    result = make_request(f"{API_BASE_URL}/projects", method="POST", data=project_data)
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {result['data']}")
        return result['data']['id']
    print()
    return None

def test_chapter_creation(project_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤—ã"""
    print("üîç –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤—ã")
    chapter_data = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –≥–ª–∞–≤–∞",
        "original_text": "„Åì„Çå„ÅØ„ÉÜ„Çπ„ÉàÁî®„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åß„Åô„ÄÇ‰∏ª‰∫∫ÂÖ¨„ÅØÂãáËÄÖ„Åß„Åô„ÄÇ"
    }
    result = make_request(f"{API_BASE_URL}/projects/{project_id}/chapters", method="POST", data=chapter_data)
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –°–æ–∑–¥–∞–Ω–∞ –≥–ª–∞–≤–∞: {result['data']}")
        return result['data']['id']
    print()
    return None

def test_term_creation(project_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞"""
    print("üîç –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
    term_data = {
        "project_id": project_id,
        "source_term": "‰∏ª‰∫∫ÂÖ¨",
        "translated_term": "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π",
        "category": "character",
        "context": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    }
    result = make_request(f"{API_BASE_URL}/glossary/terms", method="POST", data=term_data)
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –°–æ–∑–¥–∞–Ω —Ç–µ—Ä–º–∏–Ω: {result['data']}")
        return result['data']['id']
    print()
    return None

def test_duplicate_term_creation(project_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞"""
    print("üîç –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞")
    term_data = {
        "project_id": project_id,
        "source_term": "‰∏ª‰∫∫ÂÖ¨",  # –¢–æ—Ç –∂–µ —Ç–µ—Ä–º–∏–Ω
        "translated_term": "–î—Ä—É–≥–æ–π –ø–µ—Ä–µ–≤–æ–¥",
        "category": "character",
        "context": "–î—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    }
    result = make_request(f"{API_BASE_URL}/glossary/terms", method="POST", data=term_data)
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if not result['success'] else '‚ùå'} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–º)")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 400)")
    if result['data']:
        print(f"   –û—à–∏–±–∫–∞: {result['data']}")
    print()

def test_term_approval(term_id):
    """–¢–µ—Å—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞"""
    print("üîç –¢–µ—Å—Ç 6: –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
    result = make_request(f"{API_BASE_URL}/glossary/terms/{term_id}/approve", method="POST")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –¢–µ—Ä–º–∏–Ω —É—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result['data']}")
    print()

def test_term_rejection(term_id):
    """–¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞"""
    print("üîç –¢–µ—Å—Ç 7: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
    result = make_request(f"{API_BASE_URL}/glossary/terms/{term_id}/reject", method="POST")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –¢–µ—Ä–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['data']}")
    print()

def test_chapter_analysis(chapter_id):
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤—ã"""
    print("üîç –¢–µ—Å—Ç 8: –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤—ã")
    result = make_request(f"{API_BASE_URL}/processing/chapters/{chapter_id}/analyze", method="POST")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result['data']}")
    print()

def test_get_pending_terms(project_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
    print("üîç –¢–µ—Å—Ç 9: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏")
    result = make_request(f"{API_BASE_URL}/glossary/terms/{project_id}/pending")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if result['success'] else '‚ùå'}")
    print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}")
    if result['data']:
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {len(result['data'])}")
        for term in result['data']:
            print(f"     - {term['source_term']} -> {term['translated_term']} (—Å—Ç–∞—Ç—É—Å: {term['status']})")
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π API")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    test_health_check()
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_id = test_project_creation()
    if not project_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤—ã
    chapter_id = test_chapter_creation(project_id)
    if not chapter_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤—É. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
    term_id = test_term_creation(project_id)
    if not term_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ä–º–∏–Ω. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞
    test_duplicate_term_creation(project_id)
    
    # –¢–µ—Å—Ç 6: –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
    test_term_approval(term_id)
    
    # –¢–µ—Å—Ç 7: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ (—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞)
    term_id2 = test_term_creation(project_id)
    if term_id2:
        test_term_rejection(term_id2)
    
    # –¢–µ—Å—Ç 8: –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤—ã
    test_chapter_analysis(chapter_id)
    
    # –¢–µ—Å—Ç 9: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    test_get_pending_terms(project_id)
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)

if __name__ == "__main__":
    main()
