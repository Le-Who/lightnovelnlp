from __future__ import annotations

import json
from typing import List, Dict, Any

from app.services.gemini_client import gemini_client
from app.models.project import ProjectGenre


class TermExtractor:
    def __init__(self):
        self.client = gemini_client

    def extract_terms(self, text: str, project_genre: ProjectGenre = ProjectGenre.OTHER) -> List[Dict[str, Any]]:
        """
        Извлекает ключевые термины из текста с помощью Gemini API.
        
        Args:
            text: Текст для анализа
            project_genre: Жанр проекта для оптимизации промптов
            
        Returns:
            List[Dict]: Список терминов с полями:
                - source_term: оригинальный термин
                - translated_term: предложенный перевод
                - category: категория (character, location, skill, artifact, other)
                - context: контекст извлечения
                - auto_approve: флаг автоматического утверждения
        """
        prompt = self._build_extraction_prompt(text, project_genre)
        
        try:
            response = self.client.complete(prompt)
            return self._parse_response(response)
        except Exception as e:
            print(f"Error extracting terms: {e}")
            return []

    def _build_extraction_prompt(self, text: str, project_genre: ProjectGenre) -> str:
        """Строит промпт для извлечения терминов с учетом жанра."""
        
        # Жанр-специфичные инструкции
        genre_instructions = self._get_genre_instructions(project_genre)
        
        return f"""
Ты - эксперт по анализу текстов ранобэ в жанре {project_genre.value.upper()}. 
Проанализируй следующий текст и извлеки все важные термины, которые нужно переводить консистентно.

{genre_instructions}

Текст для анализа:
{text}

Извлеки следующие типы терминов:
1. Имена персонажей (character) - ВСЕГДА автоматически утверждать
2. Названия локаций (location) - автоматически утверждать, если это основные локации
3. Названия умений/способностей (skill) - автоматически утверждать, если это базовые способности
4. Названия артефактов/предметов (artifact) - автоматически утверждать, если это ключевые артефакты
5. Другие важные термины (other) - требовать ручного утверждения

ПРАВИЛА АВТОМАТИЧЕСКОГО УТВЕРЖДЕНИЯ:
- Персонажи: ВСЕ имена персонажей автоматически утверждаются
- Локации: Основные локации (города, страны, миры) - автоматически
- Умения: Базовые способности и магия - автоматически
- Артефакты: Ключевые предметы сюжета - автоматически
- Другие: Сложные термины, названия организаций - ручное утверждение

Ответ должен быть в формате JSON:
{{
    "terms": [
        {{
            "source_term": "оригинальный термин",
            "translated_term": "перевод на русский",
            "category": "character|location|skill|artifact|other",
            "context": "краткий контекст извлечения (1-2 предложения)",
            "auto_approve": true/false,
            "confidence": 85
        }}
    ]
}}

Важно:
- Извлекай только значимые термины, которые встречаются в тексте
- Предлагай естественные переводы на русский с учетом жанра
- Указывай точную категорию
- В контексте опиши, где и как используется термин
- Указывай уверенность от 0 до 100
- Правильно определяй, какие термины можно утвердить автоматически
"""

    def _get_genre_instructions(self, genre: ProjectGenre) -> str:
        """Возвращает жанр-специфичные инструкции для промпта."""
        
        instructions = {
            ProjectGenre.FANTASY: """
ЖАНР: ФАНТАСТИКА
Особое внимание уделяй:
- Именам персонажей (герои, злодеи, боги)
- Названиям магических способностей и заклинаний
- Артефактам и магическим предметам
- Названиям рас, существ и миров
- Географическим названиям фантастических локаций
- Титулам и званиям
""",
            ProjectGenre.SCIFI: """
ЖАНР: НАУЧНАЯ ФАНТАСТИКА
Особое внимание уделяй:
- Названиям технологий и устройств
- Научным терминам и концепциям
- Названиям планет, станций, кораблей
- Именам персонажей (ученые, пилоты, инженеры)
- Названиям организаций и корпораций
- Техническим способностям и навыкам
""",
            ProjectGenre.ROMANCE: """
ЖАНР: РОМАНТИКА
Особое внимание уделяй:
- Именам главных героев и их близких
- Названиям мест (кафе, парки, города)
- Эмоциональным терминам и выражениям
- Названиям событий и праздников
- Семейным титулам и отношениям
- Предметам, связанным с отношениями
""",
            ProjectGenre.ACTION: """
ЖАНР: БОЕВИК
Особое внимание уделяй:
- Именам бойцов и противников
- Названиям боевых техник и стилей
- Оружию и боевому снаряжению
- Названиям организаций и группировок
- Локациям боев и тренировок
- Способностям и навыкам боя
""",
            ProjectGenre.MYSTERY: """
ЖАНР: ДЕТЕКТИВ/МИСТЕРИЯ
Особое внимание уделяй:
- Именам детективов, подозреваемых, свидетелей
- Названиям улик и улик
- Местам преступлений и расследований
- Названиям организаций (полиция, агентства)
- Методам расследования и техникам
- Ключевым предметам и уликам
""",
            ProjectGenre.HORROR: """
ЖАНР: УЖАСЫ
Особое внимание уделяй:
- Именам персонажей и монстров
- Названиям проклятых мест и локаций
- Артефактам и проклятым предметам
- Названиям ритуалов и заклинаний
- Существам и демонам
- Местам силы и проклятым зонам
""",
            ProjectGenre.SLICE_OF_LIFE: """
ЖАНР: ПОВСЕДНЕВНОСТЬ
Особое внимание уделяй:
- Именам персонажей и их семей
- Названиям школ, магазинов, кафе
- Повседневным предметам и местам
- Названиям событий и праздников
- Семейным титулам и отношениям
- Местным достопримечательностям
""",
            ProjectGenre.ADVENTURE: """
ЖАНР: ПРИКЛЮЧЕНИЯ
Особое внимание уделяй:
- Именам путешественников и проводников
- Названиям неизведанных земель
- Артефактам и сокровищам
- Названиям опасностей и препятствий
- Картографическим терминам
- Способностям выживания и навигации
""",
            ProjectGenre.OTHER: """
ЖАНР: ДРУГОЙ
Извлекай все значимые термины, которые могут потребовать консистентного перевода:
- Имена персонажей
- Названия мест и локаций
- Уникальные термины и концепции
- Артефакты и важные предметы
- Организации и группировки
"""
        }
        
        return instructions.get(genre, instructions[ProjectGenre.OTHER])

    def _parse_response(self, response: str) -> List[Dict[str, Any]]:
        """Парсит JSON-ответ от Gemini API."""
        try:
            # Ищем JSON в ответе
            start = response.find('{')
            end = response.rfind('}') + 1
            
            if start == -1 or end == 0:
                return []
                
            json_str = response[start:end]
            data = json.loads(json_str)
            
            terms = data.get('terms', [])
            
            # Добавляем auto_approve если его нет
            for term in terms:
                if 'auto_approve' not in term:
                    # Автоматически утверждаем персонажей и основные термины
                    category = term.get('category', 'other')
                    confidence = term.get('confidence', 50)
                    
                    if category == 'character' or confidence >= 80:
                        term['auto_approve'] = True
                    else:
                        term['auto_approve'] = False
            
            return terms
        except (json.JSONDecodeError, KeyError) as e:
            print(f"Error parsing response: {e}")
            print(f"Raw response: {response}")
            return []


term_extractor = TermExtractor()
